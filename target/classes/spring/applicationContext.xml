<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd">

	<description>
		Main entry point for spring configuration
	</description>

		<context:property-placeholder location="classpath*:database.properties" />
	<!-- context -->
	<context:component-scan base-package="my.ftsm">
	</context:component-scan>

	<context:annotation-config />
	
	
	<bean id="applicationContextProvider"
		class="my.ftsm.spfk.common.infrastructure.ApplicationContextProvider" />


	<task:annotation-driven />
	
	<!-- spring transaction -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- datasource -->
	<jee:jndi-lookup id="dataSource" jndi-name="java:jboss/datasources/spfkDS"  />
<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" -->
<!-- 		destroy-method="close" lazy-init="false" p:driverClassName="org.postgresql.Driver" -->
<!-- 		p:url="jdbc:postgresql://localhost:5432/spfk-platform" p:username="postgres" p:password="password" -->
<!-- 		p:initialSize="5" p:maxActive="100" p:maxIdle="30" p:maxWait="1000" -->
<!-- 		p:poolPreparedStatements="true" p:defaultAutoCommit="false" -->
<!-- 		p:removeAbandoned="true" p:removeAbandonedTimeout="60"> -->
<!-- 		<description> -->
<!-- 			Simple datasource. This is a direct access to the -->
<!-- 			datasource that can be used for specific queries that need to bypass -->
<!-- 			hibernate functionalities. -->
<!-- 			However, if you -->
<!-- 			need to use JDBC, please -->
<!-- 			look at hibernate SQL-QUERIES, they would most probably be a more -->
<!-- 			elegant way to solve your problem. -->
<!-- 		</description> -->
<!-- 	</bean> -->

	<!-- jpa -->
	<jpa:repositories base-package="my.ftsm.spfk"
		repository-impl-postfix="Impl" transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		p:entityManagerFactory-ref="entityManagerFactory">
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">		
	</bean>
	
<!-- 	go through application event -->
	<bean id="eventListenerBean" class="my.ftsm.spfk.common.service.ApplicationListenerBean" />
	<!-- 		<description>call applicationListenerBean using applicationContextProvided to load data loader</description> -->
	
	<bean id="persistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
    <property name="persistenceXmlLocations">
        <list>
            <value>classpath*:META-INF/jpa-persistence.xml</value>
        </list>
    </property>
    <property name="defaultDataSource" ref="dataSource"/>
</bean>

<bean class ="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>


	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		p:persistence-unit-name="spfkPU" p:jpaProperties="classpath:hibernate.properties">
		<description>Build the entity manager with Hibernate as a provider
		</description>
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		 <property name="persistenceUnitManager" ref="persistenceUnitManager"/>
	</bean>
	 
	<util:property-path id="sessionFactory"
		path="entityManagerFactory.sessionFactory" />

	<!-- bean validation -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"
		p:validationMessageSource-ref="messageSource">
		<description>Enable the bean validation provider, and configure it to
			use the messageSource when resolving properties
		</description>
	</bean>

</beans>